<?php

namespace app\models;

use Yii;
use yii\web\UploadedFile;
use yii\helpers\FileHelper;
use yii\imagine\Image;
use yii\helpers\Json;
use Imagine\Image\Box;
use Imagine\Image\Point;
/**
 * This is the model class for table "user".
 *
 * @property integer $id
 * @property string $name
 * @property string $surname
 * @property string $middlename
 * @property string $sex
 * @property string $birth_date
 * @property string $city
 * @property string $position
 * @property string $subdivision
 * @property string $avatar
 */
class SelectForm extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */

    public $image;
    public $crop_info;


    public static function tableName()
    {
        return 'user';
    }

    /**
     * @inheritdoc
     */



    public function rules()
    {
        return [

            [['name', 'surname', 'middlename', 'sex', 'birth_date', 'city', 'position', 'subdivision'], 'safe'],
            [['birth_date'], 'safe'],
            [['avatar'], 'file', 'extensions' => ['gif', 'jpg', 'png']],
            [['name', 'surname', 'middlename', 'city'], 'string', 'max' => 52],
            [['sex'], 'string', 'max' => 3],
            [['position', 'subdivision'], 'string', 'max' => 100],
            [
                'image',
                'image',
                'extensions' => ['jpg', 'jpeg', 'png', 'gif'],
                'mimeTypes' => ['image/jpeg', 'image/pjpeg', 'image/png', 'image/gif'],
            ],
            ['crop_info', 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'name' => 'name',
            'surname' => 'Фамилия',
            'middlename' => 'Отчество',
            'sex' => 'Пол',
            'birth_date' => 'Дата рождения',
            'city' => 'Город',
            'position' => 'Должность',
            'subdivision' => 'Подразделение',
            'avatar' => 'Avatar',
        ];
    }


    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            $qq = UploadedFile::getInstance($this, 'avatar');
            if ($this->validate() && $qq instanceof UploadedFile) {
                $qq->saveAs(\Yii::getAlias('@webroot/ava') . DIRECTORY_SEPARATOR . $qq->baseName . '.' . $qq->extension, false);
                $this->avatar = '@web/ava' . DIRECTORY_SEPARATOR . $qq->baseName . '.' . $qq->extension;
            } else {
                $this->avatar = $this->getOldAttributes()['avatar'];
            }

            return true;
        } else {
            return false;
        }

    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        // open image
        $image = Image::getImagine()->open($this->image->tempName);

        // rendering information about crop of ONE option
        $cropInfo = Json::decode($this->crop_info)[0];
        $cropInfo['dWidth'] = (int)$cropInfo['dWidth']; //new width image
        $cropInfo['dHeight'] = (int)$cropInfo['dHeight']; //new height image
        $cropInfo['x'] = $cropInfo['x']; //begin position of frame crop by X
        $cropInfo['y'] = $cropInfo['y']; //begin position of frame crop by Y
        // Properties bolow we don't use in this example
        //$cropInfo['ratio'] = $cropInfo['ratio'] == 0 ? 1.0 : (float)$cropInfo['ratio']; //ratio image.
        //$cropInfo['width'] = (int)$cropInfo['width']; //width of cropped image
        //$cropInfo['height'] = (int)$cropInfo['height']; //height of cropped image
        //$cropInfo['sWidth'] = (int)$cropInfo['sWidth']; //width of source image
        //$cropInfo['sHeight'] = (int)$cropInfo['sHeight']; //height of source image

        //delete old images
        $oldImages = FileHelper::findFiles(Yii::getAlias('@path/to/save/image'), [
            'only' => [
                $this->id . '.*',
                'thumb_' . $this->id . '.*',
            ],
        ]);
        for ($i = 0; $i != count($oldImages); $i++) {
            @unlink($oldImages[$i]);
        }

        //saving thumbnail
        $newSizeThumb = new Box($cropInfo['dWidth'], $cropInfo['dHeight']);
        $cropSizeThumb = new Box(200, 200); //frame size of crop
        $cropPointThumb = new Point($cropInfo['x'], $cropInfo['y']);
        $pathThumbImage = Yii::getAlias('@path/to/save/image')
            . '/thumb_'
            . $this->id
            . '.'
            . $this->image->getExtension();

        $image->resize($newSizeThumb)
            ->crop($cropPointThumb, $cropSizeThumb)
            ->save($pathThumbImage, ['quality' => 100]);

        //saving original
        $this->image->saveAs(
            Yii::getAlias('@path/to/save/image')
            . '/'
            . $this->id
            . '.'
            . $this->image->getExtension()
        );
    }
}


